{"version":3,"sources":["components/Header.js","components/Form.js","components/Results.js","utilityFunctions.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","defaultProps","Form","props","state","searchInput","debounceSubmit","_","debounce","searchQueryOnChange","bind","formOnSubmit","this","submitSearchQuery","e","setState","target","value","preventDefault","cancel","onSubmit","htmlFor","type","id","placeholder","onChange","autoFocus","Component","Results","searchResults","searchQuery","fetching","fetchMore","hasMore","length","pageStart","loadMore","console","log","loader","key","map","item","href","image","contextLink","rel","style","backgroundImage","link","title","ALPHABET","makeId","Array","join","split","charAt","Math","floor","random","googleapisConfig","cx","searchType","q","App","nextIndex","axios","get","params","start","then","res","items","data","queries","nextPage","startIndex","catch","error","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4cf0c5c.chunk.js","sourcesContent":["import React from 'react'\n// import PropTypes from 'prop-types'\n\nconst Header = () => {\n  return (\n    <header className='navbar navbar-dark bg-dark mb-3'>\n      <div className='container'>\n        <span className='navbar-brand'>Custom Search Demo</span>\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = {}\nHeader.defaultProps = {}\n\nexport default Header\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      searchInput: ''\n    }\n\n    this.debounceSubmit = _.debounce(this.debounceSubmit, 700)\n\n    this.searchQueryOnChange = this.searchQueryOnChange.bind(this)\n    this.formOnSubmit = this.formOnSubmit.bind(this)\n  }\n\n  debounceSubmit () {\n    // This is the function that will be executed after given delay\n    this.submitSearchQuery()\n  }\n\n  searchQueryOnChange (e) {\n    this.setState({ searchInput: e.target.value })\n    this.debounceSubmit()\n  }\n\n  formOnSubmit (e) {\n    e.preventDefault()\n\n    // This will cancel the delayed function so we will not submit twice\n    this.debounceSubmit.cancel()\n\n    this.submitSearchQuery()\n  }\n\n  submitSearchQuery () {\n    if (this.state.searchInput !== '') {\n      this.props.submitSearchQuery(this.state.searchInput)\n    }\n  }\n\n  render () {\n    return (\n      <form className='mb-3' onSubmit={this.formOnSubmit}>\n        <div className='row'>\n          <div className='col-12 mb-3'>\n            <h1>Myndaleit</h1>\n          </div>\n          <div className='col-sm-9 col-md-8 col-lg-6 mb-3'>\n            <label htmlFor='searchQuery' className='sr-only'>Myndaleit</label>\n            <input\n              type='text'\n              className='form-control'\n              id='searchQuery'\n              placeholder=''\n              value={this.state.searchInput}\n              onChange={this.searchQueryOnChange}\n              autoFocus\n            />\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\nForm.propTypes = {\n  submitSearchQuery: PropTypes.func.isRequired\n}\n\nForm.defaultProps = {}\n\nexport default Form\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport InfiniteScroll from 'react-infinite-scroller'\n\nconst Results = ({ searchResults, searchQuery, fetching, fetchMore, hasMore }) => {\n  // Spinner\n  if (fetching) {\n    return (\n      <div className='text-center'>\n        <div className='spinner-border'>\n          <span className='sr-only'>Loading...</span>\n        </div>\n      </div>\n    )\n  }\n\n  // No results messages\n  if (searchResults.length === 0) {\n    // No results before searching\n    if (searchQuery === '') {\n      return <div><span>Byrjaðu að slá inn í leitargluggann til að fá myndir</span></div>\n    }\n    // No results after searching:\n    return <div><span>Engar myndir fundust við leitina að: <strong>\"{searchQuery}\"</strong></span></div>\n  }\n\n  // Results\n  return (\n    <InfiniteScroll\n      className='row'\n      pageStart={0}\n      loadMore={() => {\n        console.log('loadMore() => fetchMore()')\n        fetchMore()\n      }}\n      hasMore={hasMore}\n      loader={(\n        <div className='col-12 text-center' key={0}>\n          <div className='spinner-border'>\n            <span className='sr-only'>Loading...</span>\n          </div>\n        </div>\n      )}\n    >\n      {searchResults.map(item => (\n        <div className='col-md-4' key={`${item.id}`}>\n          <div className='card mb-4 shadow-lg'>\n            <a\n              href={item.image.contextLink}\n              target='_blank'\n              rel='noopener noreferrer'\n              className='bd-placeholder-img card-img'\n              style={{ backgroundImage: `url('${item.link}')` }}\n              title={item.title}\n            ><span className='sr-only'>{item.title}</span></a>\n          </div>\n        </div>\n      ))}\n    </InfiniteScroll>\n  )\n}\n\nResults.propTypes = {\n  searchResults: PropTypes.array,\n  searchQuery: PropTypes.string,\n  fetching: PropTypes.bool,\n  fetchMore: PropTypes.func.isRequired,\n  hasMore: PropTypes.func.isRequired\n}\n\nResults.defaultProps = {\n  searchResults: [],\n  searchQuery: '',\n  fetching: false\n}\n\nexport default Results\n","\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\nexport const makeId = (length = 10) => (\n  Array(length).join().split(',').map(() => (\n    ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length))\n  )).join('')\n)\n","\nexport const googleapisConfig = {\n  url: 'https://content.googleapis.com/customsearch/v1',\n  params: {\n    cx: '001361074102112665899:p7mybnrloug',\n    key: 'AIzaSyAj6qgbKJfP5qpY7fXJ7JAjlLb-vdwE7fc',\n    searchType: 'image',\n    q: ''\n  }\n}\n","import React, { Component, Fragment } from 'react'\nimport axios from 'axios'\n\nimport Header from './components/Header'\nimport Form from './components/Form'\nimport Results from './components/Results'\n\nimport { makeId } from './utilityFunctions'\nimport { googleapisConfig } from './config'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      searchQuery: '',\n      searchResults: [],\n      fetching: false,\n      nextIndex: 1\n    }\n\n    this.submitSearchQuery = this.submitSearchQuery.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n  }\n\n  fetchData (searchQuery) {\n    const { nextIndex } = this.state\n\n    this.setState({\n      fetching: true,\n      searchQuery\n    })\n\n    axios.get(googleapisConfig.url, {\n      params: { ...googleapisConfig.params, q: searchQuery, start: nextIndex }\n    }).then((res) => {\n      const items = res.data.items.map(item => {\n        item.id = makeId()\n        return item\n      })\n      this.setState({\n        searchResults: items,\n        fetching: false,\n        nextIndex: res.data.queries.nextPage[0].startIndex\n      })\n      console.log('fetchData() - res.data:', res.data)\n    }).catch((error) => {\n      this.setState({ fetching: false })\n      // TODO: handle error alert for user\n      console.log(error)\n    })\n  }\n\n  fetchMore () {\n    const { nextIndex } = this.state\n\n    axios.get(googleapisConfig.url, {\n      params: { ...googleapisConfig.params, q: this.state.searchQuery, start: nextIndex }\n    }).then((res) => {\n      const items = res.data.items.map(item => {\n        item.id = makeId()\n        return item\n      })\n      this.setState({\n        searchResults: [...this.state.searchResults, ...items],\n        nextIndex: res.data.queries.nextPage[0].startIndex\n      })\n      console.log('fetchMore() - res.data:', res.data)\n    }).catch((error) => {\n      // TODO: handle error alert for user\n      console.log(error)\n    })\n  }\n\n  submitSearchQuery (searchQuery) {\n    if (searchQuery !== '') {\n      this.fetchData(searchQuery)\n    }\n  }\n\n  render () {\n    const { searchQuery, searchResults, fetching, nextIndex } = this.state\n    return (\n      <Fragment>\n        <Header />\n        <main>\n          <div className='container'>\n            <Form submitSearchQuery={this.submitSearchQuery} />\n          </div>\n          <div className='bg-light py-3'>\n            <div className='container'>\n              <Results\n                searchQuery={searchQuery}\n                searchResults={searchResults}\n                fetching={fetching}\n                fetchMore={this.fetchMore}\n                hasMore={nextIndex < 100}\n              />\n            </div>\n          </div>\n        </main>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","/* global fetch */\n/* eslint-disable semi */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport './index.css'\nimport App from './App'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}